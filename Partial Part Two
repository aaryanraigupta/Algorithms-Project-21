/* PROBLEM = "Searching for a bus stop by full name or by the first few characters in the name, using a
          ternary search tree (TST), returning the full stop information for each stop matching the
          search criteria (which can be zero, one or more stops)".

1). Search for 0, 1 or more bus stops by full name of first few characters in the name, using a TST.

2). Return the full information of all the stops that match the given search criteria. 

Approach: Add the stop names to a TST, use this TST to search for stop names. 
          Whatever stop names match the search criteria, return their names and 
          the relevant information to do with these bus stops.
 */ 

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

class TSTNode
{
	char data;
	boolean isEnd;
	TSTNode left, middle, right;

	/** Constructor **/
	public TSTNode(char data)
	{
		this.data = data;
		this.isEnd = false;
		this.left = null;
		this.middle = null;
		this.right = null;
	}        
}

/** class TernarySearchTree **/
class TernarySearchTree
{
	private TSTNode root;
	private ArrayList<String> al;

	/** Constructor **/
	public TernarySearchTree()
	{
		root = null;
	}

	public void insert(char[] word)
	{
		root = insert(root, word, 0);
	}

	/** function to insert for a word **/
	public TSTNode insert(TSTNode r, char[] word, int ptr)
	{
		if (r == null)
			r = new TSTNode(word[ptr]);

		if (word[ptr] < r.data)
			r.left = insert(r.left, word, ptr);
		else if (word[ptr] > r.data)
			r.right = insert(r.right, word, ptr);
		else
		{
			if (ptr + 1 < word.length)
				r.middle = insert(r.middle, word, ptr + 1);
			else
				r.isEnd = true;
		}
		return r;
	}

	/** function to search for a word **/
	public boolean search(char[] word)
	{
		//System.out.println("in public boolean search(char[] word)");
		return search(root, word, 0);
	}
	/** function to search for a word **/
	private boolean search(TSTNode r, char[] word, int ptr)
	{
		//System.out.println("in private boolean search(TSTNode r, char[] word, int ptr)");
		if (r == null) {
			//System.out.println("r was null");
			return false;
		}
		if (word[ptr] < r.data)
		{
			//System.out.println("(word[ptr] < r.data)");
			return search(r.left, word, ptr);
		}
		else if (word[ptr] > r.data)
		{
			//System.out.println("(word[ptr] > r.data)");
			return search(r.right, word, ptr);
		}
		else
		{
			//reaches last node and matches size of word
			if (r.isEnd && ptr == word.length - 1)
			{
				//System.out.println("(r.isEnd && ptr == word.length - 1)");
				return true;
			}
			else if (ptr == word.length - 1)
			{
				//System.out.println("(ptr == word.length - 1)");
				return false;
			}
			else
			{
				//System.out.println("return search(r.middle, word, ptr + 1)");
				return search(r.middle, word, ptr + 1);
			}
		}        
	}
	/** function to print tree **/
	public String toString()
	{
		al = new ArrayList<String>();
		traverse(root, "");
		return "\nTernary Search Tree : "+ al;
	}
	/** function to traverse tree **/
	private void traverse(TSTNode r, String str)
	{
		if (r != null)
		{
			traverse(r.left, str);

			str = str + r.data;
			if (r.isEnd)
				al.add(str);

			traverse(r.middle, str);
			str = str.substring(0, str.length() - 1);

			traverse(r.right, str);
		}
	}
}

public class StopSearchPartTwo {

	public static void main(String[] args) throws IOException {

		String addressOfFile = "C:\\Users\\35389\\Downloads\\inputs\\stops.txt";
		File busStops = new File(addressOfFile);
		Scanner myReader = new Scanner(busStops);

		//Find out the number of rows we need to store in the array
		int rowCount = 0;
		while (myReader.hasNextLine()) {
			myReader.nextLine();
			rowCount++;
		}
		//Create the multidimensional array based on the number of rows we found and the fact that there are 10 data elements
		String[][] stopInfo = new String[rowCount][10];
		myReader.close();

		//Loop through the rows again storing the data in the new 2 dimensional array
		rowCount=0;
		boolean firstRow=true;
		Scanner myReader2 = new Scanner(busStops);
		while (myReader2.hasNextLine()) {
			String data = myReader2.nextLine();
			//the first heading row so we want to skip it
			if (firstRow) 
			{
				firstRow=false;
			}
			//we have a data row
			else {
				String[] stopDetails = data.split(",");
				for(int i = 0 ; i < 9 ; i++)
				{
					stopInfo[rowCount][i] = stopDetails[i];
				}

				// if name starts with FLAGSTOP then fix it up
				if (stopInfo[rowCount][2].substring(0,8).equals("FLAGSTOP"))
				{
					String prefix = stopInfo[rowCount][2].substring(0,11);
					stopInfo[rowCount][2] = stopInfo[rowCount][2].substring(12,stopInfo[rowCount][2].length());
					stopInfo[rowCount][2] += " " + prefix;
				}

				String temp = stopInfo[rowCount][2].substring(0,2);
				if (temp.equals("NB") || temp.equals("SB") || temp.equals("EB") || temp.equals("WB")) {
					stopInfo[rowCount][2] = stopInfo[rowCount][2].substring(3, stopInfo[rowCount][2].length());
					stopInfo[rowCount][2] += " " + temp;
				}
				rowCount++;
			}

		}
		myReader2.close();
		Scanner scan = new Scanner(System.in);

		/* Creating object of TernarySearchTree */
		TernarySearchTree tst = new TernarySearchTree(); 

		/* Inputting the stop names into the TernarySearchTree */
		//rowCount=2;
		for (int i = 0; i < rowCount; i++) {
			String temp = stopInfo[i][2];
			char[] current = temp.toCharArray();
			tst.insert(current);
		}

		// This is a test to show my search method will not work

		String test = stopInfo[0][2];
		System.out.println(test);
		/*char[] tester = test.toCharArray();
		if (tst.search(tester)) {
			System.out.println("Test was a success");
		}*/

		/* Problem is here, the program isn't getting accepting these if statements */
		/* I am unsure also as to how I make my program return the stop info once we find something that matches the search criteria */

		//		System.out.println(tst);
		boolean bool = true;
		char[] temp = null;
		String searchTerm = "";
		do {
			System.out.println("Enter stop name to search");
			temp = scan.nextLine().toCharArray();
			//temp = stopInfo[0][2].toCharArray();
			searchTerm = new String(temp);
			if (tst.search(temp)) {
				System.out.println("Search result: Success");
				System.out.println("");
				/* Add way of returning the stop information */
				boolean foundStation=false;
				for (int i = 0; i < stopInfo.length && !foundStation ; i++) {
					if (stopInfo[i][2].equals(searchTerm)) {
						foundStation=true;
						System.out.println("stop_id,stop_code,stop_name,stop_desc,stop_lat,stop_lon,zone_id,stop_url,location_type,parent_station");
						System.out.println(stopInfo[i][0] + stopInfo[i][1]+ stopInfo[i][2]+ stopInfo[i][3]+ stopInfo[i][4]+ stopInfo[i][5]+ stopInfo[i][6]+ stopInfo[i][7]+ stopInfo[i][8]+ stopInfo[i][9]);
					}
							
				}
				// TODO
				bool = false;
			}
			else {//{if (!tst.search(temp)) {
				System.out.println("Search Result: Failure");
				System.out.println("Please enter a valid bus stop name.");
				bool = true;
			}
		} while (bool == true);
	}
}
